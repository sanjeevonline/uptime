{"name":"Uptime","tagline":"A simple HTTP remote monitoring utility using Node.js and MongoDB.","body":"uptime\r\n======\r\n\r\nA remote monitoring application using Node.js, MongoDB, and Twitter Bootstrap.\r\n\r\n<img src=\"https://raw.github.com/fzaninotto/uptime/downloads/check_details.png\" title=\"Uptime screenshot\" />\r\n\r\nYou can watch a [demo screencast on Vimeo](https://vimeo.com/39302164) or try the [live demo](http://uptime.eu01.aws.af.cm/).\r\n\r\nFeatures\r\n--------\r\n\r\n* Monitor thousands of websites (powered by [Node.js asynchronous programming](http://dotheweb.posterous.com/nodejs-for-php-programmers-1-event-driven-pro))\r\n* Tweak frequency of monitoring on a per-check basis, up to the second\r\n* Receive on screen notifications whenever a check goes down (powered by [socket.io](http://socket.io/))\r\n* Receive email notifications whenever a check goes down\r\n* Record availability statistics for further reporting (powered by [MongoDB](http://www.mongodb.org/))\r\n* Detailed uptime reports with animated charts (powered by [Flotr2](http://www.humblesoftware.com/flotr2/))\r\n* Monitor availability, responsiveness, average response time, and total uptime/downtime\r\n* Get details about failed checks (HTTP error code, etc.)\r\n* Group checks by tags and get reports by tag\r\n* Familiar web interface (powered by [Twitter Bootstrap 2.0](http://twitter.github.com/bootstrap/index.html))\r\n* Complete API for integration with third-party monitoring services\r\n* Easy installation and zero administration\r\n\r\nInstalling Uptime\r\n-----------------\r\n\r\nUptime 3.0 requires Node.js 0.8 (if you're stuck with Node 0.6, try Uptime v1.4, available as a tag and on npm) and MongoDB 2.1.\r\n\r\nTo install from GitHub, clone the repository and install dependencies using `npm`:\r\n\r\n    > git clone git://github.com/fzaninotto/uptime.git\r\n    > cd uptime\r\n    > npm install\r\n\r\nLastly, start the application with:\r\n\r\n    > node app.js\r\n\r\nUpgrading From a 2.0 Install\r\n----------------------------\r\n\r\nIf you have been using uptime 1.0 or 2.0, you have to execute the migration script before using the new release.\r\n\r\n    > node models/migrations/upgrade2to3\r\n\r\nAdding Checks\r\n-------------\r\n\r\nBy default, the web UI runs on port 8082, so just browse to \r\n\r\n    http://localhost:8082/\r\n\r\nAnd you're ready to begin. Create your first check by entering an URL, wait for the first ping, and you'll soon see data flowing through your charts!\r\n\r\nConfiguring\r\n-----------\r\n\r\nUptime uses [node-config](https://github.com/lorenwest/node-config) to allow YAML configuration and environment support. Here is the default configuration, taken from `config/default.yaml`:\r\n\r\n```yaml\r\nmongodb:\r\n  server:   localhost\r\n  database: uptime\r\n  user:     root \r\n  password:\r\n  connectionString:       # alternative to setting server, database, user and password separately\r\n\r\nmonitor:\r\n  name:                   origin\r\n  apiUrl:                 'http://localhost:8082/api' # must be accessible without a proxy\r\n  pollingInterval:        10000      # ten seconds\r\n  timeout:                5000       # five seconds\r\n  userAgent:              NodeUptime/2.0 (https://github.com/fzaninotto/uptime)\r\n\r\nanalyzer:\r\n  updateInterval:         60000      # one minute\r\n  qosAggregationInterval: 600000     # ten minutes\r\n  pingHistory:            8035200000 # three months\r\n\r\nautoStartMonitor: true\r\n\r\nserver:\r\n  port:     8082\r\n```\r\n\r\nTo modify this configuration, create a `development.yaml` or a `production.yaml` file in the same directory, and override just the settings you need. For instance, to run Uptime on port 80 in production, create a `production.yaml` file as follows:\r\n\r\n```yaml\r\nserver:\r\n  port:     80\r\n```\r\n\r\nNode that Uptime works great behind a proxy - it uses the http_proxy environment variable transparently.\r\n\r\nMonitoring From Various Locations\r\n---------------------------------\r\n\r\nHeavily browsing the web dashboard may slow down the server - including the polling monitor. In other terms, using the application can influence the uptime measurements. To avoid this effect, it is recommended to run the polling monitor in a separate process.\r\n\r\nTo that extent, set the `autoStartMonitor` setting to `false` in the `production.yaml`, and launch the monitor by hand:\r\n\r\n    > node monitor.js &\r\n    > node app.js\r\n\r\nYou can also run the monitor in a different server. This second server must be able to reach the API of the dashboard server: set the `monitor.apiUrl` setting accordingly in the `production.yaml` file of the monitor server.\r\n\r\nYou can even run several monitor servers in several datacenters to get average response time. In that case, make sure you set a different `monitor.name` setting for all monitor servers to be able to tell which server make a particular ping.\r\n\r\nUsing Plugins\r\n-------------\r\n\r\nUptime provides plugins that you can enable to add more functionality.\r\n\r\nTo enable plugins, create a `plugins/index.js` module. This module must offer a public `init()` method, where you will require and initialize plugin modules. For instance, to enable only the `console` plugin:\r\n\r\n```js\r\n// in plugins/index.js\r\nexports.init = function() {\r\n  require('./console').init();\r\n}\r\n```\r\n\r\nCurrently supported plugins:\r\n\r\n * `console`: log pings and events in the console in real time\r\n * `email`: notify events (up, down pause) by email\r\n\r\nYou can customize plugins using the YAML configuration.\r\n\r\nYou can add your own plugins under the `plugins` directory. A plugin is simply a module with a public `init()` method. For instance, if you had to recreate a simple version of the `console` plugin, you could write it as follows:\r\n\r\n```js\r\n// in plugins/console/index.js\r\nvar CheckEvent = require('../../models/checkEvent');\r\nexports.init = function() {\r\n  CheckEvent.on('afterInsert', function(checkEvent) {\r\n    checkEvent.findCheck(function(err, check) {\r\n      console.log(new Date() + check.name + checkEvent.isGoDown ? ' goes down' : ' goes back up');\r\n    });\r\n  });\r\n}\r\n```\r\n\r\nAll Uptime entities emit lifecycle events that you can listen to on the Model class. These events are `beforeInsert`, `afterInsert`, `beforeUpdate`, `afterUpdate`, `beforeSave` (called for both inserts and updates), `afterSave` (called for both inserts and updates), `beforeRemove`, and `afterRemove`. For more information about these events, check the [mongoose-lifecycle](https://github.com/fzaninotto/mongoose-lifecycle) plugin.\r\n\r\nSupport and Discussion\r\n----------------------\r\n\r\nJoin the [node-uptime](https://groups.google.com/d/forum/node-uptime) Google Group to discuss features, bugs and use cases related to Uptime.\r\n\r\nLicense\r\n-------\r\n\r\nThe Uptime code is free to use and distribute, under the [MIT license](https://raw.github.com/fzaninotto/uptime/master/LICENSE).\r\n\r\nUptime uses third-party libraries:\r\n\r\n* [NodeJS](http://nodejs.org/), licensed under the [MIT License](https://github.com/joyent/node/blob/master/LICENSE#L5-22),\r\n* [Socket.io](http://socket.io/), licensed under the [MIT License](https://github.com/LearnBoost/socket.io/blob/master/Readme.md),\r\n* [MongooseJS](http://mongoosejs.com/), licensed under the [MIT License](https://github.com/LearnBoost/mongoose/blob/master/README.md),\r\n* [jQuery](http://jquery.com/), licensed under the [MIT License](http://jquery.org/license),\r\n* [TwitterBootstrap](http://twitter.github.com/bootstrap/), licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0),\r\n* [Flotr2](http://www.humblesoftware.com/flotr2/), licensed under the [MIT License](https://github.com/HumbleSoftware/Flotr2/blob/master/LICENSE).\r\n* [Favicon](http://www.alexpeattie.com/projects/justvector_icons/), distributed under the [Free Art License](http://artlibre.org/licence/lal/en).\r\n\r\nIf you like the software, please help improving it by contributing PRs on the [GitHub project](https://github.com/fzaninotto/uptime)!\r\n\r\nTODO\r\n----\r\n\r\n* Account for scheduled maintenance (and provide two QoS calculations: with and without scheduled maintenance)\r\n* Allow for JavaScript execution in the monitored resources by using a headless browser (probably zombie.js)\r\n* Unit tests\r\n","google":"UA–30862276–1","note":"Don't delete this file! It's used internally to help with page regeneration."}